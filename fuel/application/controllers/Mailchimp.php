<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Mailchimp extends CI_Controller {

		public function __construct() {
			parent::__construct();//calling the parent constructer
      $this->load->model('Mailchimp_model');//loading mail chimp model
      $this->config->load('mailchimp_email');//loading mailchimp_email config file
		}

		//first fuction to be called
	  public function index() {
				$this->load->library('email');//instantiate the email library
				$dotenv = new Dotenv\Dotenv(FCPATH);//creating instance of Dotenv(FCPATH);
				$dotenv->load();//load environment variables
				$mail_chimp_secret = getenv('SPARK_POST_SECRET');//now that the enironment variables have been loaded.  The secret key can be accesed
        $csrfTokenName = $this->security->get_csrf_token_name().'';//CodeIgnitor method thatgets the name of the token that was generated by CodeIgniter
        $csrfHash = $this->security->get_csrf_hash().'';//CodeIgnitor method that gets the hash

				//This is the field rules
			  $this->form_validation->set_rules('email', 'Email Address', 'trim|required|valid_email');
				$this->form_validation->set_rules('firstname', 'First Name', 'callback_check_empty');

        if($this->form_validation->run() == FALSE) {
            $this->output->set_status_header('400');
            $this->output->set_content_type('application/json');

            $this->data['message'] = validation_errors();

            echo json_encode([
              'message' => $this->data['message'],
              'csrfTokenName' => $csrfTokenName,
              'csrfHash' => $csrfHash
            ]);
        }
        else {
            $email = $this->input->post('email');//get email field data
            $listId = $this->config->item('list_id');//get the list ID from the config file
            $listName = $this->config->item('list_name');//get the list name from the config file
            $url = $this->config->item('api_url');//the api url from the config file

            $response = $this->Mailchimp_model->addEmailToList($email, $listName, $listId, $url);//We then call a method of the mail chimp model which returns true or false

            $this->output->set_status_header('200');//successful request
            $this->output->set_content_type('application/json');//Specifying that the response wil be json format

            if($response) {
              echo json_encode(['status' => true, 'csrfTokenName' => $csrfTokenName, 'csrfHash' => $csrfHash]);//this actually converts it to json
            } else {
              echo json_encode(['status' => false, 'csrfTokenName' => $csrfTokenName, 'csrfHash' => $csrfHash]);
            }
        }

    }

		//checks if the hidden field is filled in
		public function check_empty($string) {
  			if(empty($string)) {
  				return true;
  			} else {
  				$this->form_validation->set_message('check_empty', 'The {field} field should be no longer than 50 characters');
  				return false;
  			}
		}
	}
?>
